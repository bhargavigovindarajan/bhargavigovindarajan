ACADEMIC RESEARCH EXPERIENCE

Graduate Student Researcher at The Ohio State University                                                     Sep 2015 – May 2016	 
Sensor Integration and Communication in a Linear LED Lighting System                                	       Jan 2016 – May 2016
-  Acquiring data from various sensors embedded in a Linear LED lighting system using Raspberry Pi as an edge device and studying 
   their performance under varying weather conditions 
-  Tested and implemented at The Ohio State University Airport in December 2016 
Autonomous Ground and Areal Swarm – a MIT Lincoln-Buckeye MS works project	                                 Sep 2015 – Jan 2016
-  Worked on firmware development using Raspberry Pi for driving a surveillance robot 
-  Acquired inputs from proximity sensor, encoder data from the motor, temperature sensor and a 3-axis accelerometer 
-  Used I2C-controlled PWM driver for PWM signal generation on multiple channels to obtain a real-time control of the robot 

ACCOMPLISHMENTS

-  Received divisional recognition award for leading design and development of performance feature that improved Quality of           
   Service (QoS) on NAND SSDs									                                                             May 2021
-  Received divisional recognition award for leading enabling of USB 3.2 Gen 2x2 for first time ever on Intel processors.      Jan 2020
-  Received divisional recognition award for emulation driver development of USB power management feature and found multiple
   project critical bugs.                                                                  	   						 Sept 2018
-  Winner, OHI/O Makeathon 2016 for developing an American Sign Language Interpreter Glove                  Mar 2016          
   https://ece.osu.edu/news/2016/03/makeathon-2016-recap

ENGINEERING PROJECTS  

Peripheral Driver development for SPI, I2C, GPIO and UART protocols                                          March ’19-April’20
- Developed driver APIs from scratch for peripheral protocols like SPI, I2C, GPIO and UART using ARM Cortex M4F and implemented protocol init, Data send/Receive, 
  IRQ Handling etc.
Real-time OS development for fitness device using TM4C123 Microcontroller                                    Oct ’18 – Dec ‘19
-  Developed a priority based pre-emptive real-time OS from scratch for a fitness device using ARM Cortex M4F based TM4C123 microcontroller with scheduler 
   incorporating semaphores, mutexes, priority, thread blocking & sleeping etc. [Oct ’18 – March ‘19]
-  Developed disk and file system layer for FAT based file system to read and write the fitness parameters onto the file system. 
-  Integrated BLE with TM4C123 microcontroller for wireless communication of fitness parameters to the smart phone by developing dynamic NPI message packets
   for adding service, characteristics, and advertising.
American Sign Language Translator Glove- Sensor design, calibration, and firmware development                March-May 2016                                                                                                                 
-   Developed a gesture recognition system in Embedded C with low-cost custom-made flex and contact sensors for interpreting the American Sign Language. 
-   Developed an algorithm for efficient gesture recognition and working on integrating accelerometer, gyro meter to enable   
    recognition of two-handed gestures belonging to various sign languages.
Design of Instruction Set Simulator for ARM Cortex-M9 Processor                                              Jan - May 2016
-  Created a microprocessor model for ARM Cortex M9 Processor. Developed a GUI using MS Visual Studio and creating a dynamic link library (DLL) for the 
   ARM Cortex-M9 instruction set. 
-  Obtained opcodes from interface layer and creating a Look-up table (LUT) for the instruction function pointers. 
16-bit CISC Processor implementation in a Linux based Simulation Environment		                             Jan - April 2016
 -  Developed microinstructions to implement various instructions for OSIAC Computer developed at OSU.
 -  Instruction types included single operand (CLR, INC, etc.), double operand (ADD, SUB, etc.), branch (BEQ, BNE) and special 
     instructions like RTS (return from subroutine), HALT and used state machine model to implement the control logic.
